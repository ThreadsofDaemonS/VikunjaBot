from aiogram import F, Router
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram import Bot
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from app.REST_API_requests import get_all_available_projects, get_buckets, task_changing, get_task, get_project
from pprint import pprint

import asyncio
from datetime import datetime
from decouple import config
# from dotenv import load_dotenv
# load_dotenv()

from app.states import Login
from app.database.requests import (set_user, get_token, delete_user, get_name_vikunja, get_user_by_name_vikunja, get_user,
                                   add_project_to_user, get_projects_by_user, check_project_exist)

from bs4 import BeautifulSoup

BASE_URL_VIKUNJA = config('BASE_URL_VIKUNJA')

user = Router()

assignees = ''
sent_tasks = []

# 5490098347,

ALLOWED_CHAT_IDS = [5490098347, 6135458595, 7369803652, 218985148, 5418562140, 254138581]

@user.message(CommandStart())
async def cmd_start(msg: Message, state: FSMContext):
    await state.set_state(Login.name_vikunja)
    await msg.answer("–î–æ–±–∞–≤—å—Ç–µ name –≤ Vikunja –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Ç–∞–∫–æ–µ –∂–µ –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ Vikunja")
    await msg.reply(f"–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ–π name –æ—Ç Vikunja")


@user.message(Login.name_vikunja)
async def login_first(message: Message, state: FSMContext):
    await state.update_data(name_vikunja=message.text.strip())
    await state.set_state(Login.token)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à —Ç–æ–∫–µ–Ω")


@user.message(Login.token)
async def login_second(message: Message, state: FSMContext):
    await state.update_data(token=message.text.strip())
    data = await state.get_data()
    try:
        await set_user(chat_id=message.from_user.id, token=data['token'], username_tg=message.from_user.username,
                       name_vikunja=data['name_vikunja'])
        await message.answer(f"–í—Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω\n–í–∞—à —Ç–æ–∫–µ–Ω {data['token']}\n–í–∞—à name Vikunja: {data['name_vikunja']}")
    except Exception as e:
        print(e)
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å, –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /start –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—Å—è")

    await state.clear()


@user.message(Command("help"))
async def get_help(msg: Message):
    await msg.answer("–ö–æ–º–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç:\n/help\n/start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n")
    await msg.answer("–ö–æ–º–º–∞–Ω–∞–¥–∞ /get_project_tasks –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–≥–æ")
    await msg.answer("–ö–æ–º–º–∞–Ω–∞–¥–∞ /get_tasks –ø–æ–∫–∞–∂–µ—Ç –≤–∞–º —Ç–∞—Å–∫–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, –¥–ª—è —Ñ—Ä–æ–Ω—Ç–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã")
    await msg.answer("–ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –∑–∞–π—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ —ç—Ç—É –∫–æ–º–º–∞–Ω–¥—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è /delete_user")
    await msg.answer("–¢–æ–∫–µ–Ω –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –≤ Vikunja")
    await msg.answer("–î–æ–±–∞–≤—å—Ç–µ –∏–º—è –≤ Vikunja –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Ç–∞–∫–æ–µ –∂–µ –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ Vikunja")


@user.message(Command("delete_user"))
async def delete_from_database(message: Message):
    await delete_user(chat_id=message.from_user.id)
    await message.answer("–£–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ, –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É /start")


@user.message(Command('get_project_tasks'))
async def cmd_get_projects(message: Message):
    #projects_ids = []
    result = await get_token(message.from_user.id)
    user_token = result.scalar()
    # res = await get_name_vikunja(message.from_user.id)
    # Vikunja_username = res.scalar()
    headers = {
        "Authorization": f"Bearer {user_token}"
    }
    projects = await get_all_available_projects(BASE_URL_VIKUNJA, headers)

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –ø–æ 2 –≤ —Ä—è–¥
    for project in projects:
        builder.button(text=project['title'], callback_data=f"select_project_{project['id']}")

    # –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    builder.adjust(2)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer("–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –ø—Ä–æ–µ–∫—Ç—ã:", reply_markup=builder.as_markup())


@user.callback_query(lambda c: c.data and c.data.startswith('select_project_'))
async def handle_project_selection(callback: CallbackQuery, bot: Bot):
    global assignees
    project_id = callback.data.split('_')[2]  # –ü–æ–ª—É—á–∞–µ–º project_id –∏–∑ callback_data

    result = await get_token(callback.from_user.id)
    user_token = result.scalar()
    headers = {
        "Authorization": f"Bearer {user_token}"
    }
    project = await get_project(BASE_URL_VIKUNJA, project_id, headers)
    res_exist = await check_project_exist(project_id)
    if res_exist:
        await add_project_to_user(project_id, project['title'], callback.from_user.id)
    await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç {project['title']}", show_alert=False)
    res = await get_name_vikunja(callback.from_user.id)
    Vikunja_name = res.scalar()
    buckets = await get_buckets(BASE_URL_VIKUNJA, project_id, headers)
    # print(buckets)
    buckets_and_tasks = {}
    count = 0
    bucket_name = ''
    for bucket in buckets:
        count += 1
        if count <= 2:
            bucket_name = bucket['title']
            buckets_and_tasks[project_id] = {bucket['id']: bucket['tasks']}
            try:
                # print(buckets_and_tasks[project_id][bucket['id']])
                for task in buckets_and_tasks[project_id][bucket['id']]:

                    string = ''
                    soup = BeautifulSoup(task['description'], 'html.parser')
                    description = soup.get_text()
                    if task["assignees"]:
                        string = (
                                f" üÜòTASK {task['identifier']}\n\nüïî –í—Ä–µ–º—è: {datetime.now().replace(microsecond=0)}\n\nüëì –ó–∞–≥–æ–ª–æ–≤–æ–∫: {task['title']}\n\nüëÄ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n" +
                                f"üë®‚Äçüëß‚Äçüë¶ –ó–∞–∫–∞–∑—á–∏–∫: {task['created_by']['username']}üë®‚Äçüëß‚Äçüë¶\n\n –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {task['assignees'][0]['name']}\n\n" +
                                f"üôà –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {task['created']}\n\nüíª –°—Ç–∞—Ç—É—Å: {'–ü—Ä–æ–≤–µ—Ä–∫–∞' if task['done'] else bucket_name}\n\nüôà–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {task['done_at']}")
                    else:
                        string = (
                                f"üÜòTASK {task['identifier']}\n\nüïî –í—Ä–µ–º—è: {datetime.now().replace(microsecond=0)}\n\nüëì –ó–∞–≥–æ–ª–æ–≤–æ–∫: {task['title']}\n\nüëÄ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n" +
                                f"üë®‚Äçüëß‚Äçüë¶ –ó–∞–∫–∞–∑—á–∏–∫: {task['created_by']['username']}üë®‚Äçüëß‚Äçüë¶\n\n –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: \n\n" +
                                f"üôà –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {task['created']}\n\nüíª –°—Ç–∞—Ç—É—Å: {'–ü—Ä–æ–≤–µ—Ä–∫–∞' if task['done'] else bucket_name}\n\nüôà–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {task['done_at']}")

                    main = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–í–∑—è—Ç—å", callback_data=f"take_{task['id']}_{project_id}")],
                        [InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_{task['id']}_{project_id}")]
                    ])
                    await callback.message.answer(string, reply_markup=main)
                    # await callback.answer(string, reply_markup=main)
            except TypeError:
                exit_response = "Task is empty"

        else:
            break

    buckets = await get_buckets(BASE_URL_VIKUNJA, project_id, headers)
    count = 0
    for bucket in buckets:
        try:
            for task in bucket['tasks']:
                if task['assignees']:
                    if task['assignees'][0]['name'] == Vikunja_name:
                        assignees = task['assignees']
                        break

        except TypeError:
            exit_response = "Empty assignees"


async def poll_vikunja_for_tasks(bot, user_id, message):
    global sent_tasks
    global assignees
    if message.from_user.id in ALLOWED_CHAT_IDS:
        while True:  # –û–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
            try:
                result = await get_token(user_id)
                user_token = result.scalar()
                res = await get_name_vikunja(user_id)
                Vikunja_name = res.scalar()
                headers = {
                    "Authorization": f"Bearer {user_token}"
                }


                projects = await get_all_available_projects(BASE_URL_VIKUNJA, headers)
                print(f"üì¢ –ü—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã")
                if not projects:
                    print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤!")
                    return
                for project in projects:
                    project_id = project['id']
                    buckets = await get_buckets(BASE_URL_VIKUNJA, project_id, headers)
                    count = 0
                    bucket_name = ''
                    print(f"üìå –ü—Ä–æ–µ–∫—Ç: {project['title']}, ID: {project_id}")
                    if not buckets:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ—Ç –±–∞–∫–µ—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ {project['title']}")
                        continue
                    for bucket in buckets:
                        count += 1
                        if count <= 2:
                            bucket_name = bucket['title']
                            try:
                                if 'tasks' not in bucket or not bucket['tasks']:
                                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –í bucket '{bucket['title']}' (ID: {bucket['id']}) –Ω–µ—Ç –∑–∞–¥–∞—á!")
                                    continue
                                for task in bucket['tasks']:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
                                    print(f"üìã –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {sent_tasks}")
                                    if task['id'] in sent_tasks:
                                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏

                                    string = ''
                                    soup = BeautifulSoup(task['description'], 'html.parser')
                                    description = soup.get_text()

                                    if task["assignees"]:
                                        string = (
                                                f"üì¨Project {project['title']}\n\n üÜòTASK {task['identifier']}\n\nüïî –í—Ä–µ–º—è: {datetime.now().replace(microsecond=0)}\n\nüëì –ó–∞–≥–æ–ª–æ–≤–æ–∫: {task['title']}\n\nüëÄ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n" +
                                                f"üë®‚Äçüëß‚Äçüë¶ –ó–∞–∫–∞–∑—á–∏–∫: {task['created_by']['username']}\n\n –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {task['assignees'][0]['name']}\n\n" +
                                                f"üôà –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {task['created']}\n\nüíª –°—Ç–∞—Ç—É—Å: {'–ü—Ä–æ–≤–µ—Ä–∫–∞' if task['done'] else bucket_name}\n\nüôà–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {task['done_at']}")
                                    else:
                                        string = (
                                                f"üì¨Project {project['title']}\n\nüÜòTASK {task['identifier']}\n\nüïî –í—Ä–µ–º—è: {datetime.now().replace(microsecond=0)}\n\nüëì –ó–∞–≥–æ–ª–æ–≤–æ–∫: {task['title']}\n\nüëÄ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n" +
                                                f"üë®‚Äçüëß‚Äçüë¶ –ó–∞–∫–∞–∑—á–∏–∫: {task['created_by']['username']}\n\n –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: \n\n" +
                                                f"üôà –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {task['created']}\n\nüíª –°—Ç–∞—Ç—É—Å: {'–ü—Ä–æ–≤–µ—Ä–∫–∞' if task['done'] else bucket_name}\n\nüôà–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {task['done_at']}")

                                    main = InlineKeyboardMarkup(inline_keyboard=[
                                        [InlineKeyboardButton(text="–í–∑—è—Ç—å",
                                                              callback_data=f"take_{task['id']}_{project_id}")],
                                        [InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                                                              callback_data=f"complete_{task['id']}_{project_id}")]
                                    ])

                                    print(f"üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–∞—Å–∫–∏: {task['title']} (ID: {task['id']})")

                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
                                    await message.answer(string, reply_markup=main)

                                    # –î–æ–±–∞–≤–ª—è–µ–º task_id –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                                    sent_tasks.append(task['id'])

                            except TypeError:
                                exit_response = "Task is empty"

                        else:
                            break

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è—Ö
                    for bucket in buckets:
                        try:
                            for task in bucket['tasks']:
                                if task['assignees']:
                                    if task['assignees'][0]['name'] == Vikunja_name:
                                        assignees = task['assignees']
                                        break
                        except TypeError:
                            exit_response = "Empty assignees"

                # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–ø—Ä–æ—Å–æ–º
                await asyncio.sleep(60)
            except Exception as e:
                print(e)
    else:
        while True:  # –û–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
            try:
                projects_list = await get_projects_by_user(user_id)

                if projects_list:
                    for project in projects_list:
                        result = await get_token(user_id)
                        user_token = result.scalar()

                        headers = {
                            "Authorization": f"Bearer {user_token}"
                        }
                        currentProject = await get_project(BASE_URL_VIKUNJA, project.project_id, headers)
                        # await message.answer(f"–í–æ—Ç –∑–∞–¥–∞–Ω–∏—è –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ {project.name}")
                        res = await get_name_vikunja(user_id)
                        Vikunja_name = res.scalar()

                        buckets = await get_buckets(BASE_URL_VIKUNJA, project.project_id, headers)

                        buckets_and_tasks = {}
                        count = 0
                        bucket_name = ''
                        for bucket in buckets:
                            count += 1
                            if count <= 2:
                                bucket_name = bucket['title']
                                buckets_and_tasks[project.project_id] = {bucket['id']: bucket['tasks']}
                                try:
                                    for task in buckets_and_tasks[project.project_id][bucket['id']]:
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
                                        if task['id'] in sent_tasks:
                                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏

                                        string = ''
                                        soup = BeautifulSoup(task['description'], 'html.parser')
                                        description = soup.get_text()

                                        if task["assignees"]:
                                            string = (
                                                    f" üÜòTASK {task['identifier']}\n\nüïî –í—Ä–µ–º—è: {datetime.now().replace(microsecond=0)}\n\nüëì –ó–∞–≥–æ–ª–æ–≤–æ–∫: {task['title']}\n\nüëÄ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n" +
                                                    f"üë®‚Äçüëß‚Äçüë¶ –ó–∞–∫–∞–∑—á–∏–∫: {task['created_by']['username']}\n\n –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {task['assignees'][0]['name']}\n\n" +
                                                    f"üôà –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {task['created']}\n\nüíª –°—Ç–∞—Ç—É—Å: {'–ü—Ä–æ–≤–µ—Ä–∫–∞' if task['done'] else bucket_name}\n\nüôà–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {task['done_at']}")
                                        else:
                                            string = (
                                                    f"üÜòTASK {task['identifier']}\n\nüïî –í—Ä–µ–º—è: {datetime.now().replace(microsecond=0)}\n\nüëì –ó–∞–≥–æ–ª–æ–≤–æ–∫: {task['title']}\n\nüëÄ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n" +
                                                    f"üë®‚Äçüëß‚Äçüë¶ –ó–∞–∫–∞–∑—á–∏–∫: {task['created_by']['username']}\n\n –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: \n\n" +
                                                    f"üôà –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {task['created']}\n\nüíª –°—Ç–∞—Ç—É—Å: {'–ü—Ä–æ–≤–µ—Ä–∫–∞' if task['done'] else bucket_name}\n\nüôà–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {task['done_at']}")

                                        main = InlineKeyboardMarkup(inline_keyboard=[
                                            [InlineKeyboardButton(text="–í–∑—è—Ç—å",
                                                                  callback_data=f"take_{task['id']}_{project.project_id}")],
                                            [InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                                                                  callback_data=f"complete_{task['id']}_{project.project_id}")]
                                        ])

                                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
                                        await message.answer(string, reply_markup=main)

                                        # –î–æ–±–∞–≤–ª—è–µ–º task_id –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                                        sent_tasks.append(task['id'])

                                except TypeError:
                                    exit_response = "Task is empty"
                                    # print(exit_response)

                            else:
                                break

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è—Ö
                    count = 0
                    for bucket in buckets:
                        try:
                            for task in bucket['tasks']:
                                if task['assignees']:
                                    if task['assignees'][0]['name'] == Vikunja_name:
                                        assignees = task['assignees']
                                        break
                        except TypeError:
                            exit_response = "Empty assignees"
                            # print(exit_response)

                # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–ø—Ä–æ—Å–æ–º
                await asyncio.sleep(60)
            except Exception as e:
                print(e)

@user.message(Command('get_tasks'))
async def cmd_get_tasks(message: Message):
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–ø—Ä–æ—Å–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(poll_vikunja_for_tasks(message.bot, message.from_user.id, message))
    # await message.answer("–ù–∞—á–∞—Ç –æ–ø—Ä–æ—Å –∑–∞–¥–∞—á –∏–∑ Vikunja –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥.")




# @user.message(Command('get_tasks'))
# async def cmd_get_tasks(message: Message):
#     global assignees
#     projects_list = await get_projects_by_user(message.from_user.id)
#
#     if projects_list:
#         for project in projects_list:
#             result = await get_token(message.from_user.id)
#             user_token = result.scalar()
#
#             headers = {
#                 "Authorization": f"Bearer {user_token}"
#             }
#             currentProject = await get_project(BASE_URL_VIKUNJA, project.project_id, headers)
#             await message.answer(f"–í–æ—Ç –∑–∞–¥–∞–Ω–∏—è –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ {project.name}")
#             res = await get_name_vikunja(message.from_user.id)
#             Vikunja_name = res.scalar()
#
#             buckets = await get_buckets(BASE_URL_VIKUNJA, project.project_id, headers)
#
#
#             buckets_and_tasks = {}
#             count = 0
#             bucket_name = ''
#             for bucket in buckets:
#
#                 count += 1
#                 if count <= 2:
#                     bucket_name = bucket['title']
#                     buckets_and_tasks[project.project_id] = {bucket['id']: bucket['tasks']}
#                     try:
#                         # print(buckets_and_tasks[project_id][bucket['id']])
#                         for task in buckets_and_tasks[project.project_id][bucket['id']]:
#
#                             string = ''
#                             soup = BeautifulSoup(task['description'], 'html.parser')
#                             description = soup.get_text()
#                             if task["assignees"]:
#                                 string = (
#                                         f" üÜòTASK {task['identifier']}\n\nüïî –í—Ä–µ–º—è: {datetime.now().replace(microsecond=0)}\n\nüëì –ó–∞–≥–æ–ª–æ–≤–æ–∫: {task['title']}\n\nüëÄ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n" +
#                                         f"üë®‚Äçüëß‚Äçüë¶ –ó–∞–∫–∞–∑—á–∏–∫: {task["created_by"]["username"]}üë®‚Äçüëß‚Äçüë¶\n\n –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {task["assignees"][0]["name"]}\n\n" +
#                                         f"üôà –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {task["created"]}\n\nüíª –°—Ç–∞—Ç—É—Å: {'–ü—Ä–æ–≤–µ—Ä–∫–∞' if task["done"] else bucket_name}\n\nüôà–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {task["done_at"]}")
#                             else:
#                                 string = (
#                                         f"üÜòTASK {task['identifier']}\n\nüïî –í—Ä–µ–º—è: {datetime.now().replace(microsecond=0)}\n\nüëì –ó–∞–≥–æ–ª–æ–≤–æ–∫: {task['title']}\n\nüëÄ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n" +
#                                         f"üë®‚Äçüëß‚Äçüë¶ –ó–∞–∫–∞–∑—á–∏–∫: {task["created_by"]["username"]}üë®‚Äçüëß‚Äçüë¶\n\n –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: \n\n" +
#                                         f"üôà –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {task["created"]}\n\nüíª –°—Ç–∞—Ç—É—Å: {'–ü—Ä–æ–≤–µ—Ä–∫–∞' if task["done"] else bucket_name}\n\nüôà–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {task["done_at"]}")
#
#
#                             main = InlineKeyboardMarkup(inline_keyboard=[
#                                 [InlineKeyboardButton(text="–í–∑—è—Ç—å", callback_data=f"take_{task['id']}_{project.project_id}")],
#                                 [InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω–æ",
#                                                       callback_data=f"complete_{task['id']}_{project.project_id}")]
#                             ])
#                             await message.answer(string, reply_markup=main)
#                             # await callback.answer(string, reply_markup=main)
#                     except TypeError:
#                         exit_response = "Task is empty"
#                         # print(exit_response)
#
#                 else:
#                     break
#
#             buckets = await get_buckets(BASE_URL_VIKUNJA, project.project_id, headers)
#             count = 0
#             for bucket in buckets:
#                 try:
#                     for task in bucket['tasks']:
#                         if task['assignees']:
#                             if task['assignees'][0]['name'] == Vikunja_name:
#                                 assignees = task['assignees']
#                                 break
#
#                 except TypeError:
#                     exit_response = "Empty assignees"
#                     # print(exit_response)
#
#
#
#     else:
#         await message.answer(f"–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É /get_project_tasks")



# @user.message(Command('get_tasks_admin'))
# async def cmd_get_tasks_admin(message: Message):
#     if message.from_user.id not in ALLOWED_CHAT_IDS:
#         await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
#         return
#     global assignees
#     #projects_ids = []
#     result = await get_token(message.from_user.id)
#     user_token = result.scalar()
#     res = await get_name_vikunja(message.from_user.id)
#     Vikunja_name = res.scalar()
#     headers = {
#         "Authorization": f"Bearer {user_token}"
#     }
#     # –í—Å—ë-—Ç–∞–∫–∏ –Ω—É–∂–Ω–æ –≤ 2 —Ü–∏–∫–ª–∞ + –µ—â—ë projects –Ω–∞–¥–æ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –µ—â—ë —É—á–∏—Ç—ã–≤–∞—Ç—å —á—Ç–æ –æ–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø—Ä–æ–µ–∫—Ç–∞–º
#     # –ù—É–∂–µ–Ω —Å–ª–æ–≤–∞—Ä—å
#     buckets_and_tasks = {}
#     assignees = ''
#     projects = await get_all_available_projects(BASE_URL_VIKUNJA, headers)
#     for project in projects:
#         project_id = project['id']
#         buckets = await get_buckets(BASE_URL_VIKUNJA, project_id, headers)
#         count = 0
#         bucket_name = ''
#         for bucket in buckets:
#             count += 1
#             if count <= 2:
#                 bucket_name = bucket['title']
#                 buckets_and_tasks[project_id] = {bucket['id']: bucket['tasks']}
#                 try:
#                     #print(buckets_and_tasks[project_id][bucket['id']])
#                     for task in buckets_and_tasks[project_id][bucket['id']]:
#
#                         string = ''
#                         soup = BeautifulSoup(task['description'], 'html.parser')
#                         description = soup.get_text()
#                         if task["assignees"]:
#                             string = (
#                                     f"üì¨Project {project['title']}\n\n üÜòTASK {task['identifier']}\n\nüïî –í—Ä–µ–º—è: {datetime.now().replace(microsecond=0)}\n\nüëì –ó–∞–≥–æ–ª–æ–≤–æ–∫: {task['title']}\n\nüëÄ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n" +
#                                     f"üë®‚Äçüëß‚Äçüë¶ –ó–∞–∫–∞–∑—á–∏–∫: {task["created_by"]["username"]}üë®‚Äçüëß‚Äçüë¶\n\n –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {task["assignees"][0]["name"]}\n\n" +
#                                     f"üôà –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {task["created"]}\n\nüíª –°—Ç–∞—Ç—É—Å: {'–ü—Ä–æ–≤–µ—Ä–∫–∞' if task["done"] else bucket_name}\n\nüôà–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {task["done_at"]}")
#                         else:
#                             string = (
#                                     f"üì¨Project {project['title']}\n\nüÜòTASK {task['identifier']}\n\nüïî –í—Ä–µ–º—è: {datetime.now().replace(microsecond=0)}\n\nüëì –ó–∞–≥–æ–ª–æ–≤–æ–∫: {task['title']}\n\nüëÄ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n" +
#                                     f"üë®‚Äçüëß‚Äçüë¶ –ó–∞–∫–∞–∑—á–∏–∫: {task["created_by"]["username"]}üë®‚Äçüëß‚Äçüë¶\n\n –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: \n\n" +
#                                     f"üôà –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {task["created"]}\n\nüíª –°—Ç–∞—Ç—É—Å: {'–ü—Ä–æ–≤–µ—Ä–∫–∞' if task["done"] else bucket_name}\n\nüôà–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {task["done_at"]}")
#
#
#                         main = InlineKeyboardMarkup(inline_keyboard=[
#                             [InlineKeyboardButton(text="–í–∑—è—Ç—å", callback_data=f"take_{task['id']}_{project_id}")],
#                             [InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_{task['id']}_{project_id}")]
#                         ])
#
#                         await message.answer(string, reply_markup=main)
#                 except TypeError:
#                     exit_response = "Task is empty"
#
#             else:
#                 break
#
#     for project in projects:
#         project_id = project['id']
#         buckets = await get_buckets(BASE_URL_VIKUNJA, project_id, headers)
#         count = 0
#         for bucket in buckets:
#             try:
#                 for task in bucket['tasks']:
#                     if task['assignees']:
#                         if task['assignees'][0]['name'] == Vikunja_name:
#                             assignees = task['assignees']
#                             break
#
#             except TypeError:
#                 exit_response = "Empty assignees"

active_tasks = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ bucket ¬´–í –†–∞–±–æ—Ç–µ¬ª
checked_tasks = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–¥–∞—á, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ bucket ¬´–ü—Ä–æ–≤–µ—Ä–∫–∞¬ª


@user.callback_query(lambda c: c.data and (c.data.startswith('take_') or c.data.startswith('complete_')))
async def task_take_or_complete(callback: CallbackQuery, bot: Bot):
    global assignees, active_tasks, checked_tasks
    action, task_id, project_id = callback.data.split('_', 2)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏
    if task_id in active_tasks or task_id in checked_tasks:
        await callback.answer("–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞ –∏–ª–∏ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ.", show_alert=True)
        return


    if assignees:
        payload = {
            "done": False,
            "bucket_id": None,
            "assignees": assignees,
            "description": None
        }
    else:
        payload = {
            "done": False,
            "bucket_id": None,
            "description": None
        }

    result = await get_token(callback.from_user.id)
    user_token = result.scalar()
    headers = {
        "Authorization": f"Bearer {user_token}"
    }

    bucket_ids = []
    buckets = await get_buckets(BASE_URL_VIKUNJA, project_id, headers)
    for bucket in buckets:
        bucket_ids.append(bucket["id"])
    bucket_ids.sort()


    project = await get_project(BASE_URL_VIKUNJA, project_id, headers)
    member = await get_user(callback.from_user.id)

    if action == "take":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å –æ–ø–∏—Å–∞–Ω–∏–µ
        task = await get_task(BASE_URL_VIKUNJA, task_id, headers)
        current_description = task.get('description', '')  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

        payload["bucket_id"] = bucket_ids[2]  # –ö–æ–ª–æ–Ω–∫–∞ "–í –†–∞–±–æ—Ç–µ"
        payload["description"] = current_description  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

        await task_changing(BASE_URL_VIKUNJA, payload, task_id, headers)
        task = await get_task(BASE_URL_VIKUNJA, task_id, headers)

        description = BeautifulSoup(task['description'], 'html.parser').get_text()
        assignee_info = f"{task['assignees'][0]['name']} {'@' + member.username_tg if member else ''}" if task.get(
            "assignees") else f"{'@' + member.username_tg if member else ''}"

        task_info = (
            f"üì¨Project {project['title']}\n\n üÜòTASK {task['id']}\n\nüïî –í—Ä–µ–º—è: {datetime.now().replace(microsecond=0)}\n\n"
            f"üëì –ó–∞–≥–æ–ª–æ–≤–æ–∫: {task['title']}\n\nüëÄ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
            f"üë®‚Äçüëß‚Äçüë¶ –ó–∞–∫–∞–∑—á–∏–∫: {task['created_by']['username']}üë®‚Äçüëß‚Äçüë¶\n\n –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {assignee_info}\n\n"
            f"üôà –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {task['created']}\n\nüíª –°—Ç–∞—Ç—É—Å: –í —Ä–∞–±–æ—Ç–µ\n\nüôà–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {task['done_at']}"
        )

        await callback.message.edit_text(task_info)

        active_tasks.add(task_id)
        main_markup = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data=f"finish_{task['id']}_{project_id}")]])

        try:
            task_creator = await get_user_by_name_vikunja(task['created_by']['name'])
            await bot.send_message(chat_id=task_creator.chat_id, text=task_info, reply_markup=main_markup)
        except Exception as e:
            print(e)

    elif action == "complete":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å –æ–ø–∏—Å–∞–Ω–∏–µ
        task = await get_task(BASE_URL_VIKUNJA, task_id, headers)
        current_description = task.get('description', '')  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

        payload["bucket_id"] = bucket_ids[3]  # –ö–æ–ª–æ–Ω–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∫–∞"
        payload["done"] = True
        payload["description"] = current_description  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

        await task_changing(BASE_URL_VIKUNJA, payload, task_id, headers)
        await task_changing(BASE_URL_VIKUNJA, payload, task_id, headers)
        task = await get_task(BASE_URL_VIKUNJA, task_id, headers)

        description = BeautifulSoup(task['description'], 'html.parser').get_text()
        assignee_info = f"{task['assignees'][0]['name']} {'@' + member.username_tg if member else ''}" if task.get(
            "assignees") else f"{'@' + member.username_tg if member else ''}"

        task_info = (
            f"üì¨Project {project['title']}\n\n üÜòTASK {task['id']}\n\nüïî –í—Ä–µ–º—è: {datetime.now().replace(microsecond=0)}\n\n"
            f"üëì –ó–∞–≥–æ–ª–æ–≤–æ–∫: {task['title']}\n\nüëÄ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
            f"üë®‚Äçüëß‚Äçüë¶ –ó–∞–∫–∞–∑—á–∏–∫: {task['created_by']['username']}üë®‚Äçüëß‚Äçüë¶\n\n –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {assignee_info}\n\n"
            f"üôà –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {task['created']}\n\nüíª –°—Ç–∞—Ç—É—Å: –ü—Ä–æ–≤–µ—Ä–∫–∞\n\nüôà–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {task['done_at']}"
        )

        await callback.message.edit_text(task_info)

        active_tasks.discard(task_id)
        checked_tasks.add(task_id)

        main_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data=f"finish_{task['id']}_{project_id}")],
        ])
        try:
            task_creator = await get_user_by_name_vikunja(task['created_by']['name'])
            await bot.send_message(chat_id=task_creator.chat_id, text=task_info, reply_markup=main_markup)
        except Exception as e:
            print(e)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
    # if action == "take":
    #     payload["bucket_id"] = bucket_ids[2]  # –ö–æ–ª–æ–Ω–∫–∞ "–í –†–∞–±–æ—Ç–µ"
    #     await task_changing(BASE_URL_VIKUNJA, payload, task_id, headers)
    #     task = await get_task(BASE_URL_VIKUNJA, task_id, headers)
    #
    #     # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    #     description = BeautifulSoup(task['description'], 'html.parser').get_text()
    #     assignee_info = f"{task['assignees'][0]['name']} {'@' + member.username_tg if member else ''}" if task[
    #         "assignees"] else f"{'@' + member.username_tg if member else ''}"
    #
    #     task_info = (
    #         f"üì¨Project {project['title']}\n\n üÜòTASK {task['id']}\n\nüïî –í—Ä–µ–º—è: {datetime.now().replace(microsecond=0)}\n\n"
    #         f"üëì –ó–∞–≥–æ–ª–æ–≤–æ–∫: {task['title']}\n\nüëÄ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
    #         f"üë®‚Äçüëß‚Äçüë¶ –ó–∞–∫–∞–∑—á–∏–∫: {task['created_by']['username']}üë®‚Äçüëß‚Äçüë¶\n\n –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {assignee_info}\n\n"
    #         f"üôà –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {task['created']}\n\nüíª –°—Ç–∞—Ç—É—Å: –í —Ä–∞–±–æ—Ç–µ\n\nüôà–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {task['done_at']}"
    #     )
    #
    #     await callback.message.edit_text(task_info)
    #
    #     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∑—è—Ç–∏–∏ –∑–∞–¥–∞—á–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    #     active_tasks.add(task_id)
    #     main_markup = InlineKeyboardMarkup(
    #         inline_keyboard=[[InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data=f"finish_{task['id']}_{project_id}")]])
    #
    #     try:
    #         task_creator = await get_user_by_name_vikunja(task['created_by']['name'])
    #         await bot.send_message(chat_id=task_creator.chat_id, text=task_info, reply_markup=main_markup)
    #     except Exception as e:
    #         print(e)
    #
    # elif action == "complete":
    #     payload["bucket_id"] = bucket_ids[3]  # –ö–æ–ª–æ–Ω–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∫–∞"
    #     payload["done"] = True
    #     await task_changing(BASE_URL_VIKUNJA, payload, task_id, headers)
    #     await task_changing(BASE_URL_VIKUNJA, payload, task_id, headers)
    #     task = await get_task(BASE_URL_VIKUNJA, task_id, headers)
    #
    #     description = BeautifulSoup(task['description'], 'html.parser').get_text()
    #     assignee_info = f"{task['assignees'][0]['name']} {'@' + member.username_tg if member else ''}" if task[
    #         "assignees"] else f"{'@' + member.username_tg if member else ''}"
    #
    #     task_info = (
    #         f"üì¨Project {project['title']}\n\n üÜòTASK {task['id']}\n\nüïî –í—Ä–µ–º—è: {datetime.now().replace(microsecond=0)}\n\n"
    #         f"üëì –ó–∞–≥–æ–ª–æ–≤–æ–∫: {task['title']}\n\nüëÄ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
    #         f"üë®‚Äçüëß‚Äçüë¶ –ó–∞–∫–∞–∑—á–∏–∫: {task['created_by']['username']}üë®‚Äçüëß‚Äçüë¶\n\n –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {assignee_info}\n\n"
    #         f"üôà –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {task['created']}\n\nüíª –°—Ç–∞—Ç—É—Å: –ü—Ä–æ–≤–µ—Ä–∫–∞\n\nüôà–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {task['done_at']}"
    #     )
    #
    #     await callback.message.edit_text(task_info)
    #
    #     # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö –∑–∞–¥–∞—á
    #     active_tasks.discard(task_id)
    #     checked_tasks.add(task_id)
    #
    #     main_markup = InlineKeyboardMarkup(inline_keyboard=[
    #         [InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data=f"finish_{task['id']}_{project_id}")],
    #     ])
    #     try:
    #         task_creator = await get_user_by_name_vikunja(task['created_by']['name'])
    #         await bot.send_message(chat_id=task_creator.chat_id, text=task_info, reply_markup=main_markup)
    #     except Exception as e:
    #         print(e)


@user.callback_query(lambda c: c.data and (c.data.startswith('finish_')))
async def task_finish(callback: CallbackQuery):
    # –í–æ—Ç —ç—Ç–æ—Ç –±–ª–æ–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
    global assignees
    # –≤–æ—Ç —Ç—É—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏ –∑–∞—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
    action, task_id, project_id = callback.data.split('_', 2)
    if assignees:
        payload = {
            "done": False,
            "bucket_id": None,
            "assignees": assignees,
            "description": None
        }
    else:
        payload = {
            "done": False,
            "bucket_id": None,
            "description": None
        }

    result = await get_token(callback.from_user.id)
    user_token = result.scalar()
    headers = {
        "Authorization": f"Bearer {user_token}"
    }
    bucket_ids = []
    buckets = await get_buckets(BASE_URL_VIKUNJA, project_id, headers)
    for bucket in buckets:
        bucket_ids.append(bucket["id"])

    project = await get_project(BASE_URL_VIKUNJA, project_id, headers)
    member = await get_user(callback.from_user.id)
    bucket_ids.sort()

    if action == "finish":
        task = await get_task(BASE_URL_VIKUNJA, task_id, headers)
        current_description = task.get('description', '')
        await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É {task_id} –∏ –ø–µ—Ä–µ–Ω–µ—Å–ª–∏ –≤ –∫–æ–ª–æ–Ω–∫—É –ì–æ—Ç–æ–≤–æ', show_alert=False)
        payload["bucket_id"] = bucket_ids[4]
        payload["done"] = True
        payload["description"] = current_description
        await task_changing(BASE_URL_VIKUNJA, payload, task_id, headers)

        soup = BeautifulSoup(task['description'], 'html.parser')
        description = soup.get_text()
        if task["assignees"]:
            string = (
                    f"üì¨Project {project['title']}\n\n üÜòTASK {task['id']}\n\nüïî –í—Ä–µ–º—è: {datetime.now().replace(microsecond=0)}\n\nüëì –ó–∞–≥–æ–ª–æ–≤–æ–∫: {task['title']}\n\nüëÄ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n" +
                    f"üë®‚Äçüëß‚Äçüë¶ –ó–∞–∫–∞–∑—á–∏–∫: {task['created_by']['username']}üë®‚Äçüëß‚Äçüë¶\n\n –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {task['assignees'][0]['name']} {'@' + member.username_tg if member else ''}\n\n" +
                    f"üôà –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {task['created']}\n\nüíª –°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤–æ\n\nüôà–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {task['done_at']}")
        else:
            string = (
                    f"üì¨Project {project['title']}\n\nüÜòTASK {task['id']}\n\nüïî –í—Ä–µ–º—è: {datetime.now().replace(microsecond=0)}\n\nüëì –ó–∞–≥–æ–ª–æ–≤–æ–∫: {task['title']}\n\nüëÄ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n" +
                    f"üë®‚Äçüëß‚Äçüë¶ –ó–∞–∫–∞–∑—á–∏–∫: {task['created_by']['username']}üë®‚Äçüëß‚Äçüë¶\n\n –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {'@' + member.username_tg if member else ''}\n\n" +
                    f"üôà –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {task['created']}\n\nüíª –°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤–æ\n\nüôà–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {task['done_at']}")
        await callback.message.edit_text(string)